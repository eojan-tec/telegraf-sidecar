// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.0
// - protoc             v3.19.1
// source: telegraf.proto

package tfapi

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TelegrafClient is the client API for Telegraf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegrafClient interface {
	GetFile(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ContentResponse, common.ErrorWithAttachment)
	GetDir(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*FilesResponse, common.ErrorWithAttachment)
	Update(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment)
	Touch(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment)
	Delete(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment)
	Exist(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment)
}

type telegrafClient struct {
	cc *triple.TripleConn
}

type TelegrafClientImpl struct {
	GetFile func(ctx context.Context, in *PathRequest) (*ContentResponse, error)
	GetDir  func(ctx context.Context, in *PathRequest) (*FilesResponse, error)
	Update  func(ctx context.Context, in *ContentRequest) (*CommonResponse, error)
	Touch   func(ctx context.Context, in *PathRequest) (*CommonResponse, error)
	Delete  func(ctx context.Context, in *PathRequest) (*CommonResponse, error)
	Exist   func(ctx context.Context, in *PathRequest) (*CommonResponse, error)
}

func (c *TelegrafClientImpl) GetDubboStub(cc *triple.TripleConn) TelegrafClient {
	return NewTelegrafClient(cc)
}

func NewTelegrafClient(cc *triple.TripleConn) TelegrafClient {
	return &telegrafClient{cc}
}

func (c *telegrafClient) GetFile(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ContentResponse, common.ErrorWithAttachment) {
	out := new(ContentResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetFile", in, out)
}

func (c *telegrafClient) GetDir(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*FilesResponse, common.ErrorWithAttachment) {
	out := new(FilesResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDir", in, out)
}

func (c *telegrafClient) Update(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment) {
	out := new(CommonResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Update", in, out)
}

func (c *telegrafClient) Touch(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment) {
	out := new(CommonResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Touch", in, out)
}

func (c *telegrafClient) Delete(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment) {
	out := new(CommonResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Delete", in, out)
}

func (c *telegrafClient) Exist(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*CommonResponse, common.ErrorWithAttachment) {
	out := new(CommonResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Exist", in, out)
}

// TelegrafServer is the server API for Telegraf service.
// All implementations must embed UnimplementedTelegrafServer
// for forward compatibility
type TelegrafServer interface {
	GetFile(context.Context, *PathRequest) (*ContentResponse, error)
	GetDir(context.Context, *PathRequest) (*FilesResponse, error)
	Update(context.Context, *ContentRequest) (*CommonResponse, error)
	Touch(context.Context, *PathRequest) (*CommonResponse, error)
	Delete(context.Context, *PathRequest) (*CommonResponse, error)
	Exist(context.Context, *PathRequest) (*CommonResponse, error)
	mustEmbedUnimplementedTelegrafServer()
}

// UnimplementedTelegrafServer must be embedded to have forward compatible implementations.
type UnimplementedTelegrafServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedTelegrafServer) GetFile(context.Context, *PathRequest) (*ContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedTelegrafServer) GetDir(context.Context, *PathRequest) (*FilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDir not implemented")
}
func (UnimplementedTelegrafServer) Update(context.Context, *ContentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTelegrafServer) Touch(context.Context, *PathRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Touch not implemented")
}
func (UnimplementedTelegrafServer) Delete(context.Context, *PathRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTelegrafServer) Exist(context.Context, *PathRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (s *UnimplementedTelegrafServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedTelegrafServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedTelegrafServer) XXX_ServiceDesc() *grpc.ServiceDesc {
	return &Telegraf_ServiceDesc
}
func (UnimplementedTelegrafServer) mustEmbedUnimplementedTelegrafServer() {}

// UnsafeTelegrafServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegrafServer will
// result in compilation errors.
type UnsafeTelegrafServer interface {
	mustEmbedUnimplementedTelegrafServer()
}

func RegisterTelegrafServer(s grpc.ServiceRegistrar, srv TelegrafServer) {
	s.RegisterService(&Telegraf_ServiceDesc, srv)
}

func _Telegraf_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("GetFile", args, nil)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfapi.Telegraf/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafServer).GetFile(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegraf_GetDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("GetDir", args, nil)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfapi.Telegraf/GetDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafServer).GetDir(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegraf_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("Update", args, nil)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfapi.Telegraf/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafServer).Update(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegraf_Touch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("Touch", args, nil)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfapi.Telegraf/Touch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafServer).Touch(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegraf_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("Delete", args, nil)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfapi.Telegraf/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafServer).Delete(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegraf_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("Exist", args, nil)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfapi.Telegraf/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafServer).Exist(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Telegraf_ServiceDesc is the grpc.ServiceDesc for Telegraf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telegraf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tfapi.Telegraf",
	HandlerType: (*TelegrafServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _Telegraf_GetFile_Handler,
		},
		{
			MethodName: "GetDir",
			Handler:    _Telegraf_GetDir_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Telegraf_Update_Handler,
		},
		{
			MethodName: "Touch",
			Handler:    _Telegraf_Touch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Telegraf_Delete_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _Telegraf_Exist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telegraf.proto",
}
