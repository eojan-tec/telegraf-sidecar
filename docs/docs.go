// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/telegraf/delete": {
            "delete": {
                "description": "删除文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegraf"
                ],
                "summary": "删除文件",
                "parameters": [
                    {
                        "type": "string",
                        "description": "相对路径",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tfapi.CommonResponse"
                        }
                    }
                }
            }
        },
        "/api/telegraf/exist": {
            "get": {
                "description": "检查文件是否存在",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegraf"
                ],
                "summary": "检查文件是否存在",
                "parameters": [
                    {
                        "type": "string",
                        "description": "相对路径",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tfapi.CommonResponse"
                        }
                    }
                }
            }
        },
        "/api/telegraf/getDir": {
            "get": {
                "description": "获取文件目录下的文件路径",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegraf"
                ],
                "summary": "获取文件目录下的文件路径",
                "parameters": [
                    {
                        "type": "string",
                        "description": "相对路径",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tfapi.ContentResponse"
                        }
                    }
                }
            }
        },
        "/api/telegraf/getFile": {
            "get": {
                "description": "获取文件内容",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegraf"
                ],
                "summary": "获取文件内容",
                "parameters": [
                    {
                        "type": "string",
                        "description": "相对路径",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tfapi.ContentResponse"
                        }
                    }
                }
            }
        },
        "/api/telegraf/touch": {
            "put": {
                "description": "更新文件的访问时间和修改时间",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegraf"
                ],
                "summary": "更新文件的访问时间和修改时间",
                "parameters": [
                    {
                        "description": "相对路径",
                        "name": "path",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tfapi.PathRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tfapi.CommonResponse"
                        }
                    }
                }
            }
        },
        "/api/telegraf/update": {
            "put": {
                "description": "更新文件内容",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegraf"
                ],
                "summary": "更新文件内容",
                "parameters": [
                    {
                        "description": "文件和文件内容",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tfapi.ContentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tfapi.CommonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "tfapi.CommonResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "tfapi.ContentRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "path": {
                    "description": "path不能为空\n@inject_tag: validate:\"ne=\"",
                    "type": "string"
                }
            }
        },
        "tfapi.ContentResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "tfapi.PathRequest": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path不能为空\n@inject_tag: uri:\"path\" form:\"path\" validate:\"ne=\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Telegraf API",
	Description: "xinagri telegraf server\n错误代码\nSuccess=20000,InternalServerError=50000,BadRequest=40000,Unauthorized=40001,ErrRecordNotFound=40002,UserNameOrPasswordIsWrong=41001,UserIsNotExist=41002,NoPermission=41003,TokenInvalid=41004,TokenExpired=41005,UserDisabled=41006",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
